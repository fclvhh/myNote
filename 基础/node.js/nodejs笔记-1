# Nodejs 介绍

## Node.js是什么?

- 基于Google V8 引擎的javaScript 的运行环境
- 让javaScript 由脚本 , 真正变成了语言  「因为获得了文件读写和操作数据库的能力」
- nodejs的打包工具 npm
  - 什么是包 ?  --- 让程序自动化的命名行的工具就是所谓的包!
  - 打包工具 ?  –- 一个负责管理多个命令行工具的命令行工具!!!



## node.js特点

- 事件驱动
- 单线程 , 非阻塞
- 轻量、高效



## 适用于一些小型的网站后端的开发







# 安装





# Nodejs模块化理解

## 谈谈模块化

从流水线条的角度去理解 , 就是对任务进行拆分 , 专门的任务 , 给专门的人去做 , 这就是模块化

举例理解 : 

​	制造汽车这个任务 : 

1. 制造车壳
2. 制作轮子
3. 制作发动车
4. 制作变速箱
5. ….

这样一个大的复杂的任务 , 就被切开成无数个细小的任务 , 每一个细小的任务都会生产对应的零件

会有一个专门的人进行组装 

**引例来软件开发 :** 

​	一个复杂的项目往往有大量的js代码 , , 都在一个index.js文件里面 , 那么开发和维护难度就会很大 , 可不可以采用流水线的思想 ,完成功能的划分和切割呢?

答 : 可以 , 切割出来的功能"产品" , 被称呼为了**组件**



好了 , 零件生产完毕了 , 还需要人组装啊 , 谁来负责组装呢?

答 : webpack



本来这样就结束了 , 可是问题来了 , 有很多功能我们不想自己生产 , 想去采购第三方的!!!  

这样就需要使用外部的组件 ,  管理起来的难度加大了!



所以专门发明了一套模块化语法来解决  "零件组装的难题!"



问题: 轮胎制作 需要橡胶! 

对于轮胎厂 , 需要购入橡胶 , 来生产轮胎 , 生产好了 , 又要把轮胎卖给汽车组装厂

关键操作 :  购入 和 卖出



发明新的语法 : 

1. 一个组件必须做两件事 , 引入自己需要的零部件 
2. 生产完毕后 , 必须把自己卖出去



## CommonJS模块化机制

1. 购入资源     require(“资源地址”)
2. 卖出产品   module.exports.产品名 = 产品
   1. exports 就相当于 , 零件的批发市场







## ES6 模块化机制

- import xxx form "资源路径"   // 导入资源 , 顺便起名
- export yyy   // 导出资源









# 文件系统前置知识

## 权限位 mode

| 权限分配 | 文件所有者 |      |      | 文件所属组 |      |      | 其他用户 |      |      |
| -------- | ---------- | ---- | ---- | ---------- | ---- | ---- | -------- | ---- | ---- |
| 权限项   | 读         | 写   | 执行 | 读         | 写   | 执行 | 读       | 写   | 执行 |
| 字符表示 | r          | w    | x    | r          | w    | x    | r        | w    | x    |
| 数字表示 | 4          | 2    | 1    | 4          | 2    | 1    | 4        | 2    | 1    |

- 系统中针对三种类型进行权限分配
  - 文件所有者（自己）
  - 文件所属组（家人）
  - 其他用户（陌生人）
- 文件操作权限又分为三种，读、写和执行



一个例子

```shell
-rw-r--r-- 1 PandaShen 197121 293 Jun 23 17:44 index.md
```

解释 : 

​	pandaShen 这个文件

1. -rw- : 自己可读可写
2. -r-- : 本地的其他用户 , 可读
3. -r-- : 下载者 , 只能读



## 标识位 flag

mode决定了文件的权限 , 而flag ,则代表将对文件进行的操作

符号	含义
r	读取文件，如果文件不存在则抛出异常。
r+	读取并写入文件，如果文件不存在则抛出异常。
rs	读取并写入文件，指示操作系统绕开本地文件系统缓存。
w	写入文件，文件不存在会被创建，存在则清空后写入。
wx	写入文件，排它方式打开。
w+	读取并写入文件，文件不存在则创建文件，存在则清空后写入。
wx+	和 `w+` 类似，排他方式打开。
a	追加写入，文件不存在则创建文件。
ax	与 `a` 类似，排他方式打开。
a+	读取并追加写入，不存在则创建。
ax+	与 `a+` 类似，排他方式打开。
上面表格就是这些标识位的具体字符和含义，但是 flag 是不经常使用的，不容易被记住，所以在下面总结了一个加速记

- r：读取
- w：写入
- s：同步
- +：增加相反操作
- x：排他方式



## 文件描述符 fd

操作系统会为每个打开的文件分配一个名为文件描述符的数值标识，文件操作使用这些文件描述符来识别与追踪每个特定的文件





# 文件操作

## 文件读取

